// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace OPdWebApp.OPDInfo
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp.OPDInfo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp.ExprotService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using OPdWebApp.BarCodeReader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using AutoMapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/patitentsinfor/{Id:int}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/patitentsinfor")]
    public partial class PatitentsInfor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 849 "D:\Project\konaymyoag\OPdWebApp\OPdWebApp\OPDInfo\PatitentsInfor.razor"
       

    bool ShowScanBarcode { get; set; } = false;
    protected Person person { get; set; }
    int drugaccount { get; set; } = 1;
    int disaccount { get; set; } = 1;
    int treaccount { get; set; } = 1;
    int chargeaccount { get; set; } = 1;
    protected OPdWebApp.Address address { get; set; }
    WebCam webcam { get; set; }
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JS.InvokeAsync<IJSObjectReference>("import", "./js/webcam.js").AsTask();
    protected bool ShowConfirm { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]

    public EventCallback<Patient> EventCallback { get; set; }
    int seletedindex = 0;
    protected Drug drug { get; set; }
    protected Diagnosis diagnosis { get; set; }
    protected Treatment treatment { get; set; }
    protected Charge charge { get; set; }
    protected Patient patient { get; set; }
    OPDPage oPDPage { get; set; }
    int account = 1;
    // protected IEnumerable<Person> persons { get; set; }
    protected IEnumerable<Patient> patients { get; set; } = new List<Patient>();

    public void Show()
    {
        //  persons = p;
        ShowConfirm = true;
        loading();
        StateHasChanged();
    }
    public void EditPerson(Patient p)
    {
        try
        {
            ShowConfirm = true;
            patient = p;
            person = _mapper.Map<Person>(p.PId);
            person.PId = p.PId.PId;
            person.address = p.PId.address;
            person.QRCode = qrcode.QRCODE(person.PId.ToString());
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {

        loading();
    }
    void loading()
    {

        person = new Person();

        patient = new Patient();
        address = new OPdWebApp.Address();
        drug = new Drug();
        diagnosis = new Diagnosis();
        treatment = new Treatment();
        charge = new Charge();
        person.QRCode = qrcode.QRCODE(person.PId.ToString());
    }

    public void Close()
    {


        ShowConfirm = false;

    }



    void CheckActive(ChangeEventArgs e)
    {
        if (Convert.ToBoolean(e.Value) == false)
        {
            person.Status = Status.Inactive;
        }
        else
        {
            person.Status = Status.Active;
        }


    }

    void WebCamShow()
    {
        webcam.Show();
    }
    void GetImage(string photo)
    {
        person.Photo = photo;
    }
    private async void onChangeQRcode(string e)
    {


        
        ShowScanBarcode = !ShowScanBarcode;
        // person = persons.FirstOrDefault(obj => obj.Id == e);
        patient = await repositoryt.patient.GetAsync(e);
        // person = persons.FirstOrDefault(obj => obj.QRCode == person.QRCode);
        StateHasChanged();

    }

    private async void PrintQRCode()
    {

        if (person.QRCode != "")
        {
            var module = await Module;
            await module.InvokeVoidAsync("PrintQRCode", person.QRCode);
        }

    }

    private async void SaveAddress()
    {
        var editaddress = person.address.FirstOrDefault(obj => obj.OId == address.OId);
        if (editaddress == null)
        {
            person.address.Add(address);

        }
        else
        {

        }
        address = new Address();

        StateHasChanged();

    }
    private string error;

    private async void SaveProfile()
    {

        try
        {


            person.patient = patient;
            patient.PersonPId = person.PId;
            patient.PId= _mapper.Map<VirtualPerson>(person);
            EventCallback.InvokeAsync(patient);

            var obj = await repositoryt.persons.UpsertAsync(person);
            //  error = obj.ToString();

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {




        }
        NewPerson();
        StateHasChanged();

    }
    async void NewPerson()
    {

        person = new Person();

        patient = new Patient();
        patient.loginuser = AuthenticationService.User.email;
        patients = new List<Patient>();
        address = new OPdWebApp.Address();
        person.QRCode = qrcode.QRCODE(person.PId.ToString());
    }
    async void EditAddress(Address editaddress)
    {

        address = editaddress;

    }
    async void ontabchange(int index)
    {

        if (index == 1)
        {
            patient = new Patient();
            patient.Age = patient.AgeCalc((DateTime)person.DateOfBirth);
        }
        else if (index == 2)
        {

            try
            {

                patients = await repositoryt.patient.GetAsync(person.PId, 1);
                patient = patients.Last();
            }
            catch (Exception ex)
            {
                // error = ex.Message;
            }

            StateHasChanged();
        }
    }
    async void AddPatiten()
    {
        try
        {
            person.patient = patient;
            patient.PersonPId = person.PId;
            var obj = await repositoryt.persons.UpsertAsync(person);
            //var ilist = patients.ToList();
            //ilist.Add(patient);
            //patients = ilist.ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        patient = new Patient();
        patient.loginuser = AuthenticationService.User.email;
        patient.Age = patient.AgeCalc((DateTime)person.DateOfBirth);
        StateHasChanged();
    }
    async void SaveManagement()
    {

        StateHasChanged();
    }
    async void EditPatietn(Patient editpatient)
    {

        patient = editpatient;
        account = 1;
        seletedindex = 1;

    }
    async void ViewPatietn(Patient editpatient)
    {

        patient = editpatient;
        StateHasChanged();


    }


    async void AddCharg()
    {

        var drugvar = patient.Charges.FirstOrDefault(obj => obj.OId == charge.OId);
        if (drugvar == null)
        {
            patient.Charges.Add(charge);
        }


        charge = new Charge();


    }
    async void EditCharg(Charge editdiagnosis)
    {

        charge = editdiagnosis;


    }
    async void DeleteCharg(string Id)
    {
        var obj = patient.Charges.Where(obj => obj.OId == Id);
        patient.Charges = patient.Charges.Except(obj).ToList();

    }

    async void AddTreatment()
    {

        var drugvar = patient.Treatments.FirstOrDefault(obj => obj.OId == treatment.OId);
        if (drugvar == null)
        {
            patient.Treatments.Add(treatment);
        }


        treatment = new Treatment();


    }
    async void EditTreatment(Treatment editdiagnosis)
    {

        treatment = editdiagnosis;


    }
    async void DeleteTreatment(string Id)
    {
        var obj = patient.Treatments.Where(obj => obj.OId == Id);
        patient.Treatments = patient.Treatments.Except(obj).ToList();

    }
    async void AddDiagnosis()
    {

        var drugvar = patient.Diagnosises.FirstOrDefault(obj => obj.OId == diagnosis.OId);
        if (drugvar == null)
        {
            patient.Diagnosises.Add(diagnosis);
        }


        diagnosis = new Diagnosis();


    }
    async void EditDrugDiagnosis(Diagnosis editdiagnosis)
    {

        diagnosis = editdiagnosis;


    }
    async void DeleteDrugDiagnosis(string Id)
    {
        var obj = patient.Diagnosises.Where(obj => obj.OId == Id);
        patient.Diagnosises = patient.Diagnosises.Except(obj).ToList();

    }

    async void AddDrug()
    {

        var drugvar = patient.Drugs.FirstOrDefault(obj => obj.OId == drug.OId);
        if (drugvar == null)
        {
            patient.Drugs.Add(drug);
        }


        drug = new Drug();


    }
    async void EditDrug(Drug editdrug)
    {

        drug = editdrug;


    }
    async void DeleteDrug(string Id)
    {
        var obj = patient.Drugs.Where(obj => obj.OId == Id);
        patient.Drugs = patient.Drugs.Except(obj).ToList();

    }

    async void DeletePatitent(string Id)
    {
        //var obj = person.patients.Where(obj => obj.Id == Id);
        //person.patients = person.patients.Except(obj).ToList();
    }
    async void DeleteAddress(string Id)
    {
        var obj = person.address.Where(obj => obj.OId == Id);
        person.address = person.address.Except(obj).ToList();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAuthenticationService AuthenticationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMapper _mapper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepositoryT repositoryt { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private QRcode qrcode { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
    }
}
#pragma warning restore 1591
